import expect from 'expect';
import userReducer from './userReducer';
import {createUser,updateUser,deleteUser} from '../actions/userActions';
// set up redux-mock-store
/* import configureStore from 'redux-mock-store';
const middlewares = [];
const mockStore = configureStore(middlewares); */

describe('user reducer', () => {
  it('should return the initial state', () => {
    expect(userReducer(undefined, {})).toEqual([
       {
		name: 'Alice',
		role: 'Software Engineer',
		editing:false
	  },
	  {
		name: 'Bob',
		role: 'Senior software engineer',
		editing:false
	  },
	  {
		name: 'Martin',
		role: 'QA',
		editing:false
	  }
    ])
  })  
  
  
  
  // Create User
  
/* it('should create new user when passed ADD_USER', () => {
  const store = mockStore({});
  const user = {name: 'Sundhar',role: 'Senior software engineer',editing:false};

  store.dispatch(createUser(user));

  const actions = store.getActions();
  expect(actions).toMatchSnapshot();
});
  
  // Edit User

 it ('should update user when passed UPDATE_USER', () => {
    const initialState = [
      {
		name: 'Alice',
		role: 'Software Engineer',
		editing:false
	  },
	  {
		name: 'Bob',
		role: 'Senior software engineer',
		editing:false
	  },
	  {
		name: 'Martin',
		role: 'QA',
		editing:false
	  }
    ];
	
	const store = mockStore({});

    const user = {name: 'Sundhar',role: 'Senior software engineer',editing:false};
   	
	store.dispatch(updateUser('Alice',user));

	const actions = store.getActions();
	
	//console.log('actions',actions);
	expect(actions).toMatchSnapshot();

  
  }); 
  
  // delete user
   it ('should delete user when passed DELETE_USER', () => {
    const initialState = [
      {
		name: 'Alice',
		role: 'Software Engineer',
		editing:false
	  },
	  {
		name: 'Bob',
		role: 'Senior software engineer',
		editing:false
	  },
	  {
		name: 'Martin',
		role: 'QA',
		editing:false
	  }
    ];
	
	const store = mockStore({});

    const user = {name: 'Martin',role: 'QA',editing:false};
   	
	store.dispatch(deleteUser(user));

	const actions = store.getActions();
	
	//console.log('actions',actions);
	expect(actions).toMatchSnapshot();

  
  }); 
  
  */
  
  
  
  
});
